1. Объясните понятия JRE, JDK, JavaSE, JavaME, JavaEE.

JRE (Java Runtime Environment) – рабочая среда для запуска программ/ исполнительная среда для запуска и работы приложений, разработанных на одноименном языке программирования. / минимальная реализация виртуальной машины, необходимая для исполнения Java-приложений, без компилятора и других средств разработки. Состоит из виртуальной машины — Java Virtual Machine — и библиотеки Java-классов.

JDK (Java Development Kit) – содержит Java API, для разработки программ./ бесплатно распространяемый компанией Oracle Corporation комплект разработчика приложений на языке Java, включающий в себя компилятор Java, стандартные библиотеки классов Java, примеры, документацию, различные утилиты и исполнительную систему Java.

Java Platform, Standard Edition, сокращённо Java SE — стандартная версия платформы Java 2, предназначенная для создания и исполнения апплетов и приложений, рассчитанных на индивидуальное пользование или на использование в масштабах малого предприятия

Java Platform, Micro Edition — подмножество платформы Java для устройств, ограниченных в ресурсах, например: сотовых телефонов, карманных персональных компьютеров, ресиверов цифрового телевидения, проигрывателей дисков Blu-ray.

Java EE или Java Enterprise Edition представляет платформу для создания корпоративных приложений на языке Java. Прежде всего это сфера веб-приложений и веб-сервисов.


2. Перечислите основные свойства и преимущества платформы Java.

Объектно-ориентированный: в Java все является объектом. 

Платформонезависимый: в отличие от многих других языков, включая C и C++, Java, когда был создан, он не компилировался в платформе конкретной машины, а в независимом от платформы байт-коде. Этот байт код распространяется через интернет и интерпретируется в Java Virtual Machine (JVM), на которой он в настоящее время работает.

Простой: процессы изучения и введение в язык программирования Java остаются простыми.

Безопасным: методы проверки подлинности основаны на шифровании с открытым ключом.

Архитектурно-нейтральным: компилятор генерирует архитектурно-нейтральные объекты формата файла, что делает скомпилированный код исполняемым на многих процессорах, с наличием системе Java Runtime.

Портативный: архитектурно-нейтральный и не имеющий зависимости от реализации аспектов спецификаций — все это делает Java портативным. Компилятор в Java написан на ANSI C с чистой переносимостью, который является подмножеством POSIX.

Прочный: прилагает усилия, чтобы устранить ошибки в различных ситуациях, делая упор в основном на время компиляции, проверку ошибок и проверку во время выполнения.

Многопоточный.

Интерпретированный: Java байт-код переводится на лету в машинные инструкции и нигде не сохраняется. Делая процесс более быстрым и аналитическим, поскольку связывание происходит как дополнительное с небольшим весом процесса.

Высокопроизводительный: введение Just-In-Time компилятора, позволило получить высокую производительность.

Распространенный: предназначен для распределенной среды интернета.

Динамический: программирование на Java считается более динамичным, чем на C или C++, так как он предназначен для адаптации к меняющимся условиям. Программы могут выполнять обширное количество во время обработки информации, которая может быть использована для проверки и разрешения доступа к объектам на время выполнения.


3. Является ли язык Java компилируемым или интерпретируемым? и то, и то.
4. Что такое механизм автоматической сборки мусора (garbage collector)?

Сборка мусора в программировании — одна из форм автоматического управления памятью. Специальный процесс, называемый сборщиком мусора, периодически освобождает память, удаляя объекты, которые уже не будут востребованы приложениями.

5. В чем сходства и различия Java, C/C++, С#?
Во многом C# похож на Java
Для обоих языков компиляция выполняется в машинно-независимый и независимый от языка программирования программный код, который запускается в рамках управляемой среды выполнения. Одиночное наследование.
Сборщик мусора.
» Не существует глобальных функций или констант, все они должны принадлежать какому-либо классу.
» С# и Java не используют концепцию заголовочных файлов.
» Оба языка поддреживают внутренние классы.

с++: указатели, глобальные переменный, распределение памяти, Раздельные файлы заголовков

Концепция JVM (Java Virtual Machine) очень подобна подсистеме CLR (Common Language Runtime) языка C#.

6. Почему Java является платформой, а не языком программирования?

Java Virtual Machine или JVM - это программа, являющаяся прослойкой между операционной системой и Java программой.

7. Перечислите основные категории программ Java.
8. Какие существуют IDE для разработки программ? Eclipse. IntelliJ IDEA.  NetBeans IDE